// No he visto ninguna peli de los Vengadores

ENT
	class clsLuchador{
		private int idLuchador;
		private string nombre;
		private string foto;
		// private string puntuacion; // En nuestra BBDD no

		public int IdLuchador
		{
			get {return idLuchador;}
			set {idLuchador = value;} // Puede que sí o puede que no
		}

		public string Nombre
		{
			get {return nombre;}
			set {nombre = value;}
		}

		public string Foto
		{
			get {return foto;}
			set {foto = value;}
		}

		public clsLuchador()
        {
        }

        public clsLuchador(int idLuchador)
        {
            this.idLuchador = idLuchador;
        }

        public clsLuchador(int idLuchador, string nombre, string foto) 
        {
            this.idLuchador = idLuchador;
            this.nombre = nombre;
            this.foto = foto;
        }
	}

	class clsCombate{		
		private int idLuchador1;
        private int idLuchador2;
        private DateTime fecha;
        private int puntosLuchador1;
        private int puntosLuchador2;

        public int IdLuchador1
        {
            get { return idLuchador1; }
            set { idLuchador1 = value; } // Puede que sí o puede que no
        }

        public int IdLuchador2
        {
            get { return idLuchador2; }
            set { idLuchador2 = value; } // Puede que sí o puede que no
        }

        public DateTime Fecha
        {
            get { return fecha; }
        }

        public int PuntosLuchador1
        {
            get { return puntosLuchador1; }
            set { puntosLuchador1 = value; }
        }

        public int PuntosLuchador2
        {
            get { return puntosLuchador2; }
            set { puntosLuchador2 = value; }
        }

        public clsCombate()
        {
            this.fecha = DateTime.Now;

        }

        public clsCombate(int idLuchador1, int idLuchador2, DateTime fecha)
        {
            this.idLuchador1 = idLuchador1;
            this.idLuchador2 = idLuchador2;
            this.fecha = fecha;
        }

        public clsCombate(int idLuchador1, int idLuchador2, DateTime fecha, int puntosLuchador1, int puntosLuchador2)
        {
            this.idLuchador1 = idLuchador1;
            this.idLuchador2 = idLuchador2;
            this.fecha = fecha;
            this.puntosLuchador1 = puntosLuchador1;
            this.puntosLuchador2 = puntosLuchador2;
        }
	}

DAL
	clsListadosLuchadoresDAL{
		public static List<clsLuchador> ObtenerListadoLuchadoresDAL(){
			// TODO: Llama a la lista de luchadores de la Base de Datos
		}
	}

	clsListadosCombatesDAL{
		public static List<clsCombate> ObtenerListadoCombatesDAL(){
			// TODO: Llama a la lista de combates de la Base de Datos
		}
	
	}

	clsListadosLuchadoresConPuntuacionTotalDAL{
		public static List<clsLuchadorConPuntuacionTotal> ObtenerListadoLuchadoresConPuntuacionTotalDAL(){
			// TODO: Llama a la lista de luchadoresConPuntuacionTotal de la Base de Datos
		}
	}

	clsManejadoraCombatesDAL{
		private static bool CreaCombateDAL(clsCombate combate)
		private static bool ActualizaCombateDAL(clsCombate combate)
		private static bool CompruebaExistenciaCombateDAL(clsCombate combate)
		public static bool GuardarCombateDAL(clsCombate combate)
	}

	Conexion
		clsMyConnection{
		}

BL 
	clsListadosLuchadoresBL{
		public static List<clsLuchador> ObtenerListadoLuchadoresBL()
	}

	clsListadosCombatesBL{
		public static List<clsCombate> ObtenerListadoCombatesBL()
	
	}

	clsListadosLuchadoresConPuntuacionTotalBL{
		public static List<clsLuchadorConPuntuacionTotal> ObtenerListadoLuchadoresConPuntuacionTotalBL()
	}

	clsManejadoraCombatesBL{
		// private static bool CreaCombateBL(clsCombate combate)
		// private static bool ActualizaCombateBL(clsCombate combate)
		// private static bool CompruebaExistenciaCombateBL(clsCombate combate)
		public static bool GuardarCombateBL(clsCombate combate) // Creo que la BL sólo debería tener éste porque las otras están private en la DAL
	}

DTO
	clsLuchadorConPuntuacionTotal : Luchador {
		private int puntosTotales;

        public int PuntosTotales
        {
            get { return puntosTotales; }
            // set { puntosTotales = value; } // ¿No tiene este? Pues no
        }

        public clsLuchadorConPuntuacionTotal()
        {
        }

        public clsLuchadorConPuntuacionTotal(clsLuchador luchador, int puntosTotales) : base(luchador.IdLuchador, luchador.Nombre, luchador.Foto)
        {
            this.puntosTotales = puntosTotales;
        }
	}

ASP
	Controllers
		HomeController: Controller{
			IActionResult Index()
		}

		CombateController: Controller{
			IActionResult Index(){
				return View(clsPuntuacionCombateVM puntuacion()); // ¿O ESTO List<clsLuchador>?
			}

			[HttpPost]
			IActionResult Index(clsCombate combate){
				return (clsPuntuacionCombateVM puntuacion(combate));
			} 
		}

		ClasificacionController: Controller{
			IActionResult Index(){
				return View(List<clsLuchadorConPuntuacionTotal> listadoLuchadoresConPuntuacionTotal)
			}
		}
		
	Models	
		VM
			// Para la página 1 PUEDE QUE TODO ESTO NO HAGA FALTA AQUÍ. Pero a mí sí me hizo falta
			clsPuntuacionCombateVM : Combate { 
				private List<clsLuchador> listadoLuchadores;

				public List<clsLuchador> ListadoLuchadores
				{
				    get { return listadoLuchadores; }
				}

				public clsPuntuacionCombateVM() : base()
				{
				    this.listadoLuchadores = clsListadosLuchadoresBL.ObtenerListadoLuchadoresBL();
				    listadoLuchadores.Insert(0, new clsLuchador(0, "--- Seleccione un Luchador ---", ""));
				}

				public clsPuntuacionCombateVM(clsCombate combate) : base(combate.IdLuchador1, combate.IdLuchador2, combate.PuntosLuchador1, combate.PuntosLuchador2)
				{
				    this.listadoLuchadores = clsListadosLuchadoresBL.ObtenerListadoLuchadoresBL();
				    listadoLuchadores.Insert(0, new clsLuchador(0, "--- Seleccione un Luchador ---", ""));
				}

			}

			// Para la página 2, en ASP no hace falta porque ya lo obtengo de la DAl pero en MAUI sí lo necesitaré
			clsclasificacionVM{ 
				private List<clsLuchadorConPuntuacionTotal> listaLuchadoresConPuntuacionTotal;

				public List<clsLuchadorConPuntuacionTotal> ListaLuchadoresConPuntuacionTotal
				{
				    get { return listaLuchadoresConPuntuacionTotal; }
				}

				public clsClasificacionVM() 
				{
				    listaLuchadoresConPuntuacionTotal = clsListadosLuchadoresConPuntuacionTotalBL.ObtenerListadoLuchadoresConPuntuacionTotalBL();
				}
			}
	Views
		Vista con dos enlaces
		Vista con la clasificacion de personajes con su puntuacion
		Vista para crear/editar combates y puntuarlos

MAUI 
	VM
		// Para la página 1 
		clsPuntuacionCombateVM { // Creo que no Hereda, no hereda

               private List<clsLuchador> listadoLuchadores;
               private int puntuacionMaxima;
               private clsLuchador luchadorElegido1;
               private clsLuchador luchadorElegido2;
               private int puntuacionElegida1;
               private int puntuacionElegida2;
               private DelegateCommand botonGuardar;
               private clsCombate combate;

               public List<clsLuchador> ListadoLuchadores
               {
                   get { return listadoLuchadores; }
               }

               public int PuntuacionMaxima
               {
                   get { return puntuacionMaxima; }
               }

               public clsLuchador LuchadorElegido1
               {
                   get { return luchadorElegido1; }
                   set
                   {
                       luchadorElegido1 = value;
                       botonGuardar.RaiseCanExecuteChanged();
                   }
               }

               public clsLuchador LuchadorElegido2
               {
                   get { return luchadorElegido2; }
                   set
                   {
                       luchadorElegido2 = value;
                       botonGuardar.RaiseCanExecuteChanged();
                   }
               }

               public int PuntuacionElegida1
               {
                   get { return puntuacionElegida1; }
                   set { puntuacionElegida1 = value; }
               }

               public int PuntuacionElegida2
               {
                   get { return puntuacionElegida2; }
                   set { puntuacionElegida2 = value; }
               }

               public DelegateCommand BotonGuardar
               {
                   get { return botonGuardar; }
               }

               public clsPuntuacionCombateVM()

               {
                  // TODO: Inicializa todos los Atributos necesarios y el Command

               }

			private async void muestraMensaje(string titulo, string cuerpo, string boton)
			{
			    await Application.Current.MainPage.DisplayAlert(titulo, cuerpo, boton);
			}

			private void guardarExecute()
			{
			    // TODO: Acciones y mensajes necesarios para guardar el Combate
			}


			private bool habilitarGuardar()
			{
			    // TODO: Acciones necesarias para habilitar el boton

			}
		}

		// Para la página 2
		clsclasificacionVM{ 
			private List<clsLuchadorConPuntuacionTotal> listaLuchadoresConPuntuacionTotal;

			public List<clsLuchadorConPuntuacionTotal> ListaLuchadoresConPuntuacionTotal
			{
			    get { return listaLuchadoresConPuntuacionTotal; }
			}

			public clsClasificacionVM() 
			{
			    listaLuchadoresConPuntuacionTotal = clsListadosLuchadoresConPuntuacionTotalBL.ObtenerListadoLuchadoresConPuntuacionTotalBL();
			}
		}

	Views
		// Vista con dos enlaces // Aquí no, porque usaremos un Shell
		Vista con la clasificacion de personajes con su puntuacion
		Vista para crear/editar combates y puntuarlos